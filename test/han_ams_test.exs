defmodule HanAmsTest do
  use ExUnit.Case
  doctest HanAms
  alias HanAms.Lists

  # messageType1           messageTypes = 1
  # twoFasesMessageType2   messageTypes = 9
  # twoFasesMessageType3   messageTypes = 14
  # threeFasesMessageType2 messageTypes = 13
  # threeFasesMessageType3 messageTypes = 18

  test "parse MessageType1" do
    bytes =
      <<0x7E, 0xA0, 0x27, 0x01, 0x02, 0x01, 0x10, 0x5A, 0x87, 0xE6, 0xE7, 0x00, 0x0F, 0x40, 0x00,
        0x00, 0x00, 0x09, 0x0C, 0x07, 0xE2, 0x05, 0x1B, 0x07, 0x13, 0x25, 0x26, 0xFF, 0x80, 0x00,
        0x00, 0x02, 0x01, 0x06, 0x00, 0x00, 0x03, 0x52, 0x81, 0x3D, 0x7E>>

    actual = HanAms.Parser.decode(bytes)

    assert actual == %{
             meter_time: {:ok, ~N[2018-05-27 19:37:38.000000]},
             list: %Lists.MessageType1{
               act_pow_pos: 850
             }
           }
  end

  # @tag :skip
  test "parse threeFasesMessageType2" do
    bytes =
      <<0x7E, 0xA0, 0x78, 0x01, 0x02, 0x01, 0x10, 0xC4, 0x98, 0xE6, 0xE7, 0x00, 0x0F, 0x40, 0x00,
        0x00, 0x00, 0x09, 0x0C, 0x07, 0xE2, 0x05, 0x19, 0x05, 0x0C, 0x2B, 0x0A, 0xFF, 0x80, 0x00,
        0x00, 0x02, 0x0D, 0x09, 0x07, 0x4B, 0x46, 0x4D, 0x5F, 0x30, 0x30, 0x31, 0x09, 0x10, 0x36,
        0x39, 0x37, 0x30, 0x36, 0x33, 0x31, 0x34, 0x30, 0x31, 0x34, 0x36, 0x38, 0x38, 0x30, 0x33,
        0x09, 0x07, 0x4D, 0x41, 0x33, 0x30, 0x34, 0x48, 0x34, 0x06, 0x00, 0x00, 0x02, 0xA0, 0x06,
        0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x01, 0xB8, 0x06,
        0x00, 0x00, 0x08, 0x5E, 0x06, 0x00, 0x00, 0x06, 0x1A, 0x06, 0x00, 0x00, 0x01, 0x7B, 0x06,
        0x00, 0x00, 0x09, 0x56, 0x06, 0x00, 0x00, 0x09, 0x66, 0x06, 0x00, 0x00, 0x09, 0x5A, 0x36,
        0x45, 0x7E>>

    actual = HanAms.Parser.decode(bytes)

    expected = %{
      meter_time: {:ok, ~N[2018-05-25 12:43:10.000000]},
      list: %Lists.ThreeFasesMessageType2{
        obis_list_version: "KFM_001",
        gs1: "6970631401468803",
        meter_model: "MA304H4",
        act_pow_pos: 672,
        act_pow_neg: 0,
        react_pow_pos: 0,
        react_pow_neg: 440,
        curr_l1: 2142,
        curr_l2: 1562,
        curr_l3: 379,
        volt_l1: 2390,
        volt_l2: 2406,
        volt_l3: 2394
      }
    }

    assert actual == expected
  end

  @tag :skip
  test "parse threeFasesMessageType3" do
    bytes =
      <<0x7E, 0xA0, 0x9A, 0x01, 0x02, 0x01, 0x10, 0xAA, 0xA5, 0xE6, 0xE7, 0x00, 0x0F, 0x40, 0x00,
        0x00, 0x00, 0x09, 0x0C, 0x07, 0xE2, 0x05, 0x1A, 0x06, 0x15, 0x00, 0x0A, 0xFF, 0x80, 0x00,
        0x00, 0x02, 0x12, 0x09, 0x07, 0x4B, 0x46, 0x4D, 0x5F, 0x30, 0x30, 0x31, 0x09, 0x10, 0x36,
        0x39, 0x37, 0x30, 0x36, 0x33, 0x31, 0x34, 0x30, 0x31, 0x34, 0x36, 0x38, 0x38, 0x30, 0x33,
        0x09, 0x07, 0x4D, 0x41, 0x33, 0x30, 0x34, 0x48, 0x34, 0x06, 0x00, 0x00, 0x04, 0x3E, 0x06,
        0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x02, 0x27, 0x06,
        0x00, 0x00, 0x0C, 0x57, 0x06, 0x00, 0x00, 0x07, 0x14, 0x06, 0x00, 0x00, 0x02, 0xE6, 0x06,
        0x00, 0x00, 0x09, 0x6B, 0x06, 0x00, 0x00, 0x09, 0x87, 0x06, 0x00, 0x00, 0x09, 0x7D, 0x09,
        0x0C, 0x07, 0xE2, 0x05, 0x1A, 0x06, 0x15, 0x00, 0x0A, 0xFF, 0x80, 0x00, 0x00, 0x06, 0x01,
        0x3A, 0x28, 0xCF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x13, 0x00, 0x06, 0x00,
        0x1C, 0xD0, 0x52, 0x89, 0x6B, 0x7E>>

    actual = HanAms.Parser.decode(bytes)

    expected = %{
      meter_time: {:ok, ~N[2018-05-26 21:00:10.000000]},
      list: %Lists.ThreeFasesMessageType3{
        obis_list_version: "KFM_001",
        gs1: "6970631401468803",
        meter_model: "MA304H4",
        act_pow_pos: 1086,
        act_pow_neg: 0,
        react_pow_pos: 0,
        react_pow_neg: 551,
        curr_l1: 3159,
        curr_l2: 1812,
        curr_l3: 742,
        volt_l1: 2411,
        volt_l2: 2439,
        volt_l3: 2429,
        datetime: {:ok, ~N[2018-05-26 21:00:10.000000]},
        act_energy_pa: 20_588_751,
        act_energy_ma: 0,
        act_energy_pr: 4864,
        act_energy_mr: 1_888_338
      }
    }

    assert actual == expected
  end
end
